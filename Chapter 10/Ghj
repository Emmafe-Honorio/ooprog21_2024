Here is a Java implementation using arrays for student record management:

import java.util.Scanner;

class Student {
    private int id;
    private String firstName;
    private String lastName;
    private String course;
    private int yearLevel;

    // Constructor
    public Student(int id, String firstName, String lastName, String course, int yearLevel) {
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.course = course;
        this.yearLevel = yearLevel;
    }

    // Getters
    public int getId() { return id; }
    public String getFirstName() { return firstName; }
    public String getLastName() { return lastName; }
    public String getCourse() { return course; }
    public int getYearLevel() { return yearLevel; }

    // Display student details
    public void displayStudent() {
        System.out.println("ID: " + id + ", Name: " + firstName + " " + lastName +
                ", Course: " + course + ", Year Level: " + yearLevel);
    }
}

public class StudentManager {
    private static Student[] students = new Student[100]; // Array to store student records
    private static int studentCount = 0; // Counter for the number of students

    public static void addStudent(Scanner scanner) {
        if (studentCount >= 100) {
            System.out.println("Student record limit reached. Cannot add more students.");
            return;
        }

        System.out.print("Enter Student ID: ");
        int id = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        System.out.print("Enter First Name: ");
        String firstName = scanner.nextLine();

        System.out.print("Enter Last Name: ");
        String lastName = scanner.nextLine();

        System.out.print("Enter Course: ");
        String course = scanner.nextLine();

        System.out.print("Enter Year Level: ");
        int yearLevel = scanner.nextInt();
        scanner.nextLine(); // Consume newline

        students[studentCount] = new Student(id, firstName, lastName, course, yearLevel);
        studentCount++;
        System.out.println("Student added successfully!\n");
    }

    public static void displayAllStudents() {
        if (studentCount == 0) {
            System.out.println("No student records available.");
            return;
        }
        System.out.println("Student Records:");
        for (int i = 0; i < studentCount; i++) {
            students[i].displayStudent();
        }
    }

    public static void displayAllStudentsReverse() {
        if (studentCount == 0) {
            System.out.println("No student records available.");
            return;
        }
        System.out.println("Student Records in Reverse Order:");
        for (int i = studentCount - 1; i >= 0; i--) {
            students[i].displayStudent();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\nMenu:");
            System.out.println("1. Add New Student");
            System.out.println("2. Display All Students");
            System.out.println("3. Display All Students in Reverse");
            System.out.println("0. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addStudent(scanner);
                    break;
                case 2:
                    displayAllStudents();
                    break;
                case 3:
                    displayAllStudentsReverse();
                    break;
                case 0:
                    System.out.println("Exiting program. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 0);

        scanner.close();
    }
}

Explanation:

1. Student Class:

Contains attributes for id, firstName, lastName, course, and yearLevel.

Has a constructor and getters.

displayStudent() prints student details.



2. StudentManager Class:

Uses an array (students[100]) to store student records.

addStudent(): Adds a new student record.

displayAllStudents(): Displays all stored students.

displayAllStudentsReverse(): Displays students in reverse order.

Uses a menu-driven system with a do-while loop for user interaction.




Would you like any modifications?

